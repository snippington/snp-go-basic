// Name: Golang basic snippets.
// Desc: Based on examples from gobyexample.com
// Source Name: Go By Example
// Source Url: https://gobyexample.com/
{
    "Go Hello": {
        "scope": "go",
        "prefix": "go: hello",
        "body": [
            "package main\n",
            "import (",
            "\t\"fmt\"",
            ")\n",
            "func main(){",
            "\tfmt.Println(\"Hello ${1:World}!!!\")",
            "}",
        ],
        "description": "Hello World in Golang."
    },
    "Go Variable": {
        "scope": "go",
        "prefix": "go: var",
        "body": [
            "var $1 string = \"$2\"",
        ],
        "description": "Declare a variable in Golang."
    },
    "Go Short Variable": {
        "scope": "go",
        "prefix": "go: short-var",
        "body": [
            "$1 := \"$2\"",
        ],
        "description": "Declare a variable using shorthand in Golang."
    },
    "Go Constant": {
        "scope": "go",
        "prefix": "go: const",
        "body": [
            "const $1 string = \"$2\"",
        ],
        "description": "Declare a constant in Golang."
    },
    "Go Condition": {
		"scope": "go",
		"prefix": "go: switch",
		"body": [
			"switch $1 {",
			"case $2:",
			"\tfmt.Println(\"Something\")",
			"case $3:",
			"\tfmt.Println(\"Something else\")",
			"}"
		],
		"description": "Declare a condition in Golang."
	},
	"Go Array": {
		"scope": "go",
		"prefix": "go: arr",
		"body": [
			"var $1 [$2]$3"
		],
		"description": "Declare an array in Golang."
	},
	"Go Slice": {
		"scope": "go",
		"prefix": "go: slice",
		"body": [
			"${1:a} := make([]$2, $3)",
			"$1 = append($1, ${4:\"some_val\"})"
		],
		"description": "Declare a slice in Golang."
	},
	"Go Map": {
		"scope": "go",
		"prefix": "go: map",
		"body": [
			"${1:m} := make(map[${2:string}]${3:string})",
			"${1}[$4]=$5"
		],
		"description": "Declare a map in Golang."
	},
    "Go Range": {
		"scope": "go",
		"prefix": "go: range",
		"body": [
			"for k, v := range $1 {",
			"\tfmt.Printf(\"%s -> %s\", k, v)",
			"}"
		],
		"description": "A range in Golang."
	},
    "Go Func Multiple": {
		"scope": "go",
		"prefix": "go: func-mult",
		"body": [
			"func returnMultipleVals() (${1:string}, ${2:string}) {",
			"\treturn ${3:\"abc\"}, ${4:\"xyz\"}",	
			"}"
		],
		"description": "Function to return multiple values in Golang."
	},
	"Go Func Variadic": {
		"scope": "go",
		"prefix": "go: func-variadic",
		"body": [
			"func variadicFunction(${1:vals} ...${2:int}) {",
			"\tfor _, item := range $1 {",
			"\t\tfmt.Println(item)",	
			"\t}",
			"}",
		],
		"description": "Variadic function in Golang."
	},
	"Go Pointers": {
		"scope": "go",
		"prefix": "go: pointer",
		"body": [
			"func callingFunc(){",
			"\t${1:i}:=${2:1}",
			"\tcalledFunc(&$1)",
			"}\n",
			"func calledFunc(iptr *${3:int}){",
			"\t\/\/Pointer dereferenced and value assigned below.",
			"\t*iptr = ${4:0}",	
			"}",
		],
		"description": "Pointers in Golang."
	},
    "Go Struct": {
		"scope": "go",
		"prefix": "go: struct",
		"body":
		[
			"type person struct {", 
			"\tname string", 
			"\tage  int", 
			"}\n", 
			"func createStruct() {", 
			"\ts := person{name: \"Sean\", age: 50}\n", 
			"\tfmt.Println(\"Details: \",s.name)",
			"}"
		],
		"description": "Buffered Channels in Golang."
	},
	"Go Struct Embedded": {
		"scope": "go",
		"prefix": "go: struct-embedded",
		"body":
		[
			"type ${1:base} struct {", 
			"\tsampleValX int", 
			"}\n",
			"type ${2:container} struct {",
			"\t$1", 
			"\tsampleValY string", 
			"}",
			"func sampleCall(){",
			"\tc := $2{",
			"\t\t$1 : $1{",
			"\t\t\tsampleValX: 1,",
			"\t\t},",
			"\t\tsampleValY: \"something\",",
			"\t}",
			"\tfmt.Println(c.sampleValY)",
			"}"
		],
		"description": "Embedded Struct in Golang."
	},
    "Go Error": {
		"scope": "go",
		"prefix": "go: error",
		"body": 
		[
			"var someCondition bool = false", 
			"if (someCondition){",  
			"\terrors.New(\"Something broke.\")", 
			"}"
		],
		"description": "Error in Golang."
	},
    "Go Routine Anonymous": {
		"scope": "go",
		"prefix": "go: routine-anon",
		"body": 
		[
			"go func(msg string) {", 
			"\tfmt.Println(msg)",  
			"}(\"sample msg\")", 
		],
		"description": "Go routine with anonymouse func in Golang."
	},
	"Go Routine": {
		"scope": "go",
		"prefix": "go: routine-basic",
		"body": 
		[
			"func sampleFunc(msg string){", 
			"\tfmt.Println(msg)",  
			"}\n",
			"func callerFunc(){",
			"\tgo sampleFunc(\"sample msg\")",
			"}"
		],
		"description": "Go routine with anonymouse func in Golang."
	},
	"Go Channel": {
		"scope": "go",
		"prefix": "go: channel",
		"body":
		[
			"\/\/Creating a channel.", 
			"ch := make(chan string)\n", 
			"\/\/Blocking send to channel.",
			"go func() { ",
			"\tch <- \"ping\" ",
			"}()\n", 
			"\/\/Blocking read from channel.",
			"msg := <-ch", 
			"fmt.Println(msg)", 
			""
		],
		"description": "Channel in Golang."
	},
	"Go Buffered Channel": {
		"scope": "go",
		"prefix": "go: channel-buffered",
		"body": [
			"\n\/\/Buffered channels accept limited no.",
			"\/\/of values without concurrent receiver.\n",
			"\/\/Creating buffered Channel.",
			"ch := make(chan string, 2)\n",
			"\/\/Sending to Channel.",
			"ch <- \"buffered\"",
			"ch <- \"channel\"\n",
			"\/\/Values received later.",
			"fmt.Println(<-ch)",
			"fmt.Println(<-ch)"
		],
		"description": "Buffered Channels in Golang."
	},
	"Go Channel Select": {
		"scope": "go",
		"prefix": "go: channel-wait-select",
		"body": [
			"${1:c1} := make(chan string)",
			"${2:c2} := make(chan string)\n",
			"go func() {",
			"\ttime.Sleep(1 * time.Second)",
			"\t$1 <- \"one\"",
			"}()\n",
			"go func() {",
			"\ttime.Sleep(2 * time.Second)",
			"\t$2 <- \"two\"",
			"}()\n",
			"for i := 0; i < 2; i++ {",
			"\tselect {",
			"\tcase ${3:msg1} := <-$1:",
			"\t\tfmt.Println(\"received\", $3)",
			"\tcase ${4:msg2} := <-$2:",
			"\t\tfmt.Println(\"received\", $4)",
			"\t}",
			"}"
		],
		"description": "Using Select to wait Channels in Golang."
	},
	"Go Channels Range": {
		"scope": "go",
		"prefix": "go: channels-range",
		"body": 
		[
			"${1:ch} := make(chan string, 2)",
			"$1 <- \"first_msg\"",
			"$1 <- \"second_msg\"",
			"close($1)",
			"for ${2:elem} := range $1 {",
			"\tfmt.Println($2)",
			"}"
		],
		"description": "Channels Range in Golang."
	},
	"Go Worker Pools": {
		"scope": "go",
		"prefix": "go: worker-pools",
		"body": 
		[
			"func worker(id int, jobs <-chan int, results chan<- int) {", 
			"\t\/\/Run concurrent worker instances.",
			"\t\/\/Receive work on the jobs channel.",
			"\t\/\/Send corresponding results to resulting channel.",
			"\tfor j := range jobs {", 
			"\t\tfmt.Println(\"worker\", id, \"started  job\", j)", 
			"\t\ttime.Sleep(time.Second)", 
			"\t\tfmt.Println(\"worker\", id, \"finished job\", j)", 
			"\t\tresults <- j * 2", 
			"\t}", 
			"}\n",
			"func callerFunc(){",
			"\tconst numJobs = 5\n", 
			"\t\/\/Create channel to create jobs and track results.",
			"\tjobs := make(chan int, numJobs)", 
			"\tresults := make(chan int, numJobs)\n", 
			"\t\/\/Initiate workers.",
			"\tfor w := 1; w <= 3; w++ {", 
			"\t\tgo worker(w, jobs, results)", 
			"\t}\n",
			"\t\/\/Send jobs to the channel.",
			"\tfor j := 1; j <= numJobs; j++ {", 
			"\t\tjobs <- j", 
			"\t}", 
			"\tclose(jobs)\n", 
			"\t\/\/Collect results from jobs.",
			"\tfor a := 1; a <= numJobs; a++ {", 
			"\t\t<-results", 
			"\t}",
			"}"
		],
		"description": "Worker Pools with Channels in Golang."
	},
	"Go WaitGroup": {
		"scope": "go",
		"prefix": "go: waitgroup",
		"body": [
			"var ${1:wg} sync.WaitGroup",
		],
		"description": ""
	},
	"Go WaitGroup Snippet": {
		"scope": "go",
		"prefix": "go: waitgroup-snippet",
		"body": 
		[
			"func worker(id int){", 
			"\tfmt.Printf(\"Worker %d starting\", id)",  
			"\ttime.Sleep(time.Second)",
			"\tfmt.Printf(\"Worker %d done\", id)",
			"}\n", 
			"func callerFunc (){", 
			"\t\/\/Create WaitGroup to wait on",
			"\t\/\/all goroutines to finish.",
			"\tvar wg sync.WaitGroup\n",
			"\t\/\/Increment WaitGroup and",
			"\t\/\/create multiple gorountines.",
			"\tfor i := 1; i <= 5; i++ {",
			"\t\twg.Add(1)",
			"\t\ti := i",
			"\t\t\/\/Wrap the worker call in a closure that",
			"\t\t\/\/makes sure to tell the WaitGroup",
			"\t\t\/\/that this worker is done.",
			"\t\tgo func() {",
			"\t\t\tdefer wg.Done()",
			"\t\t\tworker(i)",
			"\t\t}()",
			"\t}",
			"\t\/\/Block until the WaitGroup",
			"\t\/\/counter goes back to 0.",
			"\twg.Wait()",
			"\t\/\/Note: Order of workers starting up and",
			"\t\/\/finishing is likely to be different.",
			"}"
		],
		"description": "WaitGroup in Golang."
	},
	"Go Mutex": {
		"scope": "go",
		"prefix": "go: mutex-snippet",
		"body": 
		[
			"var x  = 0\n", 
			"func sampleAction(wg *sync.WaitGroup, m *sync.Mutex) {", 
			"\tm.Lock()", 
			"\tx = x + 1", 
			"\tm.Unlock()", 
			"\twg.Done()", 
			"}\n", 
			"func callerFunc() {", 
			"\tvar w sync.WaitGroup", 
			"\tvar m sync.Mutex", 
			"\tfor i := 0; i < 10; i++ {", 
			"\t\tw.Add(1)", 
			"\t\tgo sampleAction(&w, &m)", 
			"\t}", 
			"\tw.Wait()", 
			"\tfmt.Println(\"value of x\", x)", 
			"}"]
		,
		"description": "Mutex snippet in Golang."
	},
	"Go Http Server Hello World": {
		"scope": "go",
		"prefix": "go: server-hello",
		"body": [
			"func helloWorld(w http.ResponseWriter, r *http.Request) {",
			"\tfmt.Fprintf(w, \"hello\")",
			"}",
			"",
			"http.HandleFunc(\"/hello\", helloWorld)",
			"http.ListenAndServe(\":8090\", nil)",
		],
		"description": "Go Server Hello World."
	},
	"Go Http Server Set Header": {
		"scope": "go",
		"prefix": "go: server-set-header",
		"body": [
			"//w is http.ResponseWriter",
			"w.Header().Set(\"${1:Content-Type}\",\"${2:application/json}\")",
		],
		"description": "Go Server Set Header."
	},
	"Go Http Server Read Form POST Value": {
		"scope": "go",
		"prefix": "go: server-form-post-value",
		"body": [
			"//r is *http.Request",
			"sampleVal := r.PostFormValue(\"sampleFormField\")",
			"if sampleVal == \"\" {",
			"\tsampleVal = \"somethingElse\"",
			"}",
		],
		"description": "Read value from Http Server form POST."
	},
	"Go Http Server Query String": {
		"scope": "go",
		"prefix": "go: server-query-string",
		"body": [
			"//r is *http.Request",
			"sampleValue := r.URL.Query().Get(\"sample\")",
		],
		"description": "Read query string value."
	},
	"Go Http Server Return JSON": {
		"scope": "go",
		"prefix": "go: server-return-json",
		"body": [
			"//Place this in your handler function.",
			"w.WriteHeader(http.StatusCreated)",
			"w.Header().Set(\"Content-Type\", \"application/json\")",
			"sampleResponse := make(map[string]string)",
			"sampleResponse[\"info\"] = \"Hola Mundo!\"",
			"jsonResp, err := json.Marshal(sampleResponse)",
			"if err != nil {",
			"\tlog.Fatalf(\"Something broke. Err: %s\", err)",
			"}",
			"w.Write(jsonResp)",
			"return",
		],
		"description": "Return JSON on Http Server."
	},
	"Go Server Serve Image": {
		"scope": "go",
		"prefix": "go: server-serve-image",
		"body": [
			"\tbuf, err := ioutil.ReadFile(\"sid.png\")",
			"",
			"\tif err != nil {",
			"\t\tlog.Fatal(err)",
			"\t}",
			"\tw.Header().Set(\"Content-Type\", \"image/png\")",
			"\tw.Write(buf)",
		],
		"description": "Go serve image with Http server."
	},
	"Go Test": {
		"scope": "go",
		"prefix": "go: unit-test",
		"body": [
			"func TestFunc(t *testing.T) {}",
		],
		"description": "Go Unit Test."
	},
	"Go Command Line Args": {
		"scope": "go",
		"prefix": "go: cli-args",
		"body": [
			"argsWithProg := os.Args",
			"argsWithoutProg := os.Args[1:]"
		],
		"description": "Go Command Line Arguments."
	},
	"Go Interface": {
		"scope": "go",
		"prefix": "go: interface",
		"body": [
			"type ${1:Shape} interface {",
			"\t${2:Area}() float64",
			"\t${3:Perimeter}() float64",
			"}",
		],
		"description": "Golang interface."
	},
}